<?php

/**
 * Author: B Moss
 * Email: benmoss2002@fastmail.co.uk
 * Date: 22/12/22
 * 
 * @author B Moss
 */

declare (strict_types = 1);

namespace Phpocketbase;

use GuzzleHttp\Psr7\Response as Response;

class Client
{
    protected $baseUri;
    protected $httpClient;
    protected $error;
    protected $response;

    private $headers = [
        'Content-Type' => 'application/json'
    ];

    /**
     * Constructor method
     *
     * @param string $baseUri the base uri of the Pocketbase instance
     */
    public function __construct(string $baseUri)
    {
        $this->baseUri = $baseUri;

        $this->httpClient = new \GuzzleHttp\Client();
    }

    public function __destruct() {}

    /**
     * Set the Authorisation token used for administrator requests
     *
     * @param string $token (JWT token generated by the Pocketbase instance)
     * @return void
     */
    public function setAuthToken(string $token)
    {
        $this->setHeader('Authorisation', $token);
    }

    public function getBaseUri()
    {
        return $this->baseUri;
    }

    /**
     * Return the HTTP client
     *
     * @return \GuzzleHttp\Client
     */
    public function getHttpClient() : \GuzzleHttp\Client
    {
        return $this->httpClient;
    }

    /**
     * Return the HTTP response
     *
     * @return Response
     */
    public function getResponse() : Response
    {
        return $this->response;
    }

    public function getHeaders()
    {
        return $this->headers;
    }

    public function getError()
    {
        return $this->error;
    }

    public function getAuth()
    {
        return new Auth($this);
    }

    public function getRest()
    {
        return new Rest($this);
    }

    public function setHeader(string $header, string $value) : void
    {
        $this->headers[$header] = $value;
    }

    public function executeHttpRequest(string $method, string $uri, array $options)
    {
        try {
            $this->response = $this->httpClient->request($method, $uri, $options);
            return json_decode((string) $this->response->getBody());
        } catch(\GuzzleHttp\Exception\RequestException $error) {
            throw $error;
        } catch(\GuzzleHttp\Exception\ConnectException $error) {
            $this->error = $error->getMessage();
            throw $error;
        };
    }
}